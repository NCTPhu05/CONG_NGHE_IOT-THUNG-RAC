#include <Servo.h>
#include <DHT.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// ====== Servo & C·∫£m bi·∫øn ======
Servo myservo;

#define GOC_DONG 0
#define GOC_MO 130

int trigPin = D2;
int echoPin = D1;
int servoPin = D5;
#define BUZZER_PIN D7
#define LED_PIN D6 
#define DHTPIN D3    
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// ====== RGB LED Pins ======
#define RED_PIN D0
#define GREEN_PIN D8
#define BLUE_PIN D4

int openCount = 0;  // Th√™m d√≤ng n√†y
unsigned long previousMillisLED = 0;  // L∆∞u th·ªùi gian thay ƒë·ªïi LED
int ledState = 0;  // Tr·∫°ng th√°i LED, s·∫Ω thay ƒë·ªïi t·ª´ 0 -> 1 -> 2 -> 0 ->...
bool overheatTriggered = false;

unsigned long previousMillis = 0;
unsigned char autoTrigger = 0;
unsigned long autoMillis = 0;

// ====== WiFi & MQTT ======
const char* ssid = "Fablab 2.4G";
const char* password = "Fira@2024";
const char* mqtt_server = "192.168.69.87";

WiFiClient espClient;
PubSubClient client(espClient);

// ====== K·∫øt n·ªëi WiFi ======
void setup_wifi() {
  delay(10);
  Serial.println("ƒêang k·∫øt n·ªëi WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi b·ªã m·∫•t k·∫øt n·ªëi. ƒêang k·∫øt n·ªëi l·∫°i...");
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("ƒê√£ k·∫øt n·ªëi WiFi!");
  Serial.print("IP c·ªßa ESP8266: ");
  Serial.println(WiFi.localIP());
}

// ====== K·∫øt n·ªëi l·∫°i MQTT n·∫øu b·ªã m·∫•t ======
void reconnect() {
  while (!client.connected()) {
    Serial.print("ƒêang k·∫øt n·ªëi MQTT...");
    if (client.connect("ESP8266Client")) {
      Serial.println(" => ƒê√£ k·∫øt n·ªëi MQTT!");
      client.subscribe("trashbin/control");
    } else {
      Serial.println(" => Th·∫•t b·∫°i, th·ª≠ l·∫°i sau 5s.");
      Serial.print("M√£ l·ªói MQTT: ");
      Serial.println(client.state());
      delay(5000);
    }
  }
}

// ====== Callback khi nh·∫≠n l·ªánh t·ª´ MQTT ======
void callback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.print("Nh·∫≠n l·ªánh t·ª´ MQTT: ");
  Serial.println(message);

  if (String(topic) == "trashbin/control") {
    if (message == "open") {
      myservo.write(GOC_MO);
      digitalWrite(LED_PIN, HIGH);
      tone(BUZZER_PIN, 1500);
      delay(100);
      noTone(BUZZER_PIN);

      client.publish("trashbin/servo", "open");
      client.publish("trashbin/buzzer", "on");
      client.publish("trahbin/led", "on");
      openCount++;
      Serial.print("S·ªë l·∫ßn m·ªü n·∫Øp (MQTT): ");
      Serial.println(openCount);
      // G·ª≠i l√™n MQTT
      String countStr = String(openCount);
      client.publish("trashbin/opencount", countStr.c_str());
    } 
    else if (message == "close") {
      myservo.write(GOC_DONG);
      digitalWrite(LED_PIN, LOW);
      noTone(BUZZER_PIN); // t·∫Øt buzzer ph√≤ng tr∆∞·ªùng h·ª£p ƒëang k√™u
      client.publish("trashbin/servo", "close");
      client.publish("trashbin/buzzer", "off");
      client.publish("trashbin/led", "off");
    }
  }
}

// ====== C·∫£m bi·∫øn kho·∫£ng c√°ch ======
long getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  return duration * 0.034 / 2; // ƒë·ªïi ra cm
}

// ====== C√†i ƒë·∫∑t ban ƒë·∫ßu ======
void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  myservo.attach(servoPin);
  myservo.write(GOC_DONG);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  dht.begin();
  String json = "{\"temperature\":25.3}";
  client.publish("trashbin/temperature", json.c_str());
  pinMode(BLUE_PIN, OUTPUT);  // ƒê·ªïi LED_BLUE_PIN th√†nh BLUE_PIN
  pinMode(GREEN_PIN, OUTPUT); // ƒê·ªïi LED_GREEN_PIN th√†nh GREEN_PIN
  pinMode(RED_PIN, OUTPUT);   // ƒê·ªïi LED_RED_PIN th√†nh RED_PIN
}

// ====== V√≤ng l·∫∑p ch√≠nh ======
void loop() {
  if (!client.connected()) reconnect();
  client.loop();

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi b·ªã m·∫•t k·∫øt n·ªëi. ƒêang k·∫øt n·ªëi l·∫°i...");
    setup_wifi();
  }

  if (millis() - previousMillis >= 200) {
    previousMillis = millis();
    int distance = getDistance();
    Serial.print("Kho·∫£ng c√°ch ƒëo ƒë∆∞·ª£c: ");
    Serial.println(distance);
    Serial.println(" cm");

    static int lastDistance = -1;
    if (abs(distance - lastDistance) > 2) {
      lastDistance = distance;
      String msg = String(distance);
      Serial.print("G·ª≠i l√™n MQTT: ");
      Serial.println(msg);
      if (client.publish("trashbin/distance", msg.c_str())) {
        Serial.println("ƒê√£ g·ª≠i l√™n MQTT!");
      } else {
        Serial.println("Kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu l√™n MQTT!");
      }
    }

    // T·ª± ƒë·ªông m·ªü n·∫Øp n·∫øu c√≥ ng∆∞·ªùi l·∫°i g·∫ßn
    if (distance < 15) {
      autoTrigger = 1;
      autoMillis = millis();
      myservo.write(GOC_MO);
      tone(BUZZER_PIN, 1500);
      delay(100);
      noTone(BUZZER_PIN);
      digitalWrite(LED_PIN, HIGH);
      client.publish("trashbin/servo", "open");
      client.publish("trashbin/buzzer", "on");
      client.publish("trashbin/led", "on");
      openCount++;
      Serial.print("S·ªë l·∫ßn m·ªü n·∫Øp (MQTT): ");
      Serial.println(openCount);
      // G·ª≠i l√™n MQTT
      String countStr = String(openCount);
      client.publish("trashbin/opencount", countStr.c_str());
    }
  }
  // ƒê√≥ng n·∫Øp sau 2 gi√¢y n·∫øu ƒë√£ m·ªü t·ª± ƒë·ªông
  if (millis() - autoMillis >= 2000 && autoTrigger == 1) {
    autoTrigger = 0;
    myservo.write(GOC_DONG);
    digitalWrite(LED_PIN, LOW);
    client.publish("trashbin/servo", "close");
    client.publish("trashbin/buzzer", "off");
    client.publish("trashbin/led", "off");
  }

  // ƒê·ªçc nhi·ªát ƒë·ªô/ƒë·ªô ·∫©m
  unsigned long lastTempHumMillis = 0;
  const unsigned long tempHumInterval = 1000; 
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  if (!isnan(temperature) && !isnan(humidity)) {
    String tempStr = String(temperature);
    String humStr = String(humidity);

    Serial.print("Nhi·ªát ƒë·ªô: ");
    Serial.print(tempStr);
    Serial.print(" ¬∞C, ƒê·ªô ·∫©m: ");
    Serial.print(humStr);
    Serial.println(" %");

    client.publish("trashbin/temperature", tempStr.c_str());
    client.publish("trashbin/humidity", humStr.c_str());
  } else {
    Serial.println("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ DHT11");
  }

  // üö® N·∫øu nhi·ªát ƒë·ªô ‚â• 40 ƒë·ªô C => c·∫£nh b√°o
  if (temperature >= 40 && !overheatTriggered) {
    overheatTriggered = true;
    Serial.println("üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô qu√° cao! M·ªû N·∫ÆP!");
    myservo.write(GOC_MO);
    digitalWrite(LED_PIN, HIGH);
    tone(BUZZER_PIN, 1000); // k√™u li√™n t·ª•c

    client.publish("trashbin/servo", "open");
    client.publish("trashbin/buzzer", "on");
    client.publish("trashbin/led", "on");
    openCount++;
    Serial.print("S·ªë l·∫ßn m·ªü n·∫Øp (MQTT): ");
    Serial.println(openCount);
    // G·ª≠i l√™n MQTT
    String countStr = String(openCount);
    client.publish("trashbin/opencount", countStr.c_str());
  }

  // N·∫øu nhi·ªát ƒë·ªô gi·∫£m < 40 => t·∫Øt c·∫£nh b√°o (t√πy b·∫°n mu·ªën gi·ªØ m·ªü hay t·ª± ƒë√≥ng l·∫°i)
  if (temperature < 40 && overheatTriggered) {
    overheatTriggered = false;
    Serial.println("‚úÖ Nhi·ªát ƒë·ªô b√¨nh th∆∞·ªùng tr·ªü l·∫°i");

    noTone(BUZZER_PIN); // t·∫Øt c√≤i
    digitalWrite(LED_PIN, LOW);
    myservo.write(GOC_DONG); // ƒê√≥ng n·∫Øp n·∫øu mu·ªën
    client.publish("trashbin/servo", "close");
    client.publish("trashbin/buzzer", "off");
    client.publish("trashbin/led", "off");
  }
  // Thay ƒë·ªïi m√†u LED sau m·ªói 2 gi√¢y
  if (millis() - previousMillisLED >= 2000) {
    previousMillisLED = millis(); // C·∫≠p nh·∫≠t th·ªùi gian

  // T·∫Øt t·∫•t c·∫£ c√°c LED
    digitalWrite(BLUE_PIN, LOW);  // ƒê·ªïi LED_BLUE_PIN th√†nh BLUE_PIN
    digitalWrite(GREEN_PIN, LOW); // ƒê·ªïi LED_GREEN_PIN th√†nh GREEN_PIN
    digitalWrite(RED_PIN, LOW);   // ƒê·ªïi LED_RED_PIN th√†nh RED_PIN

  // ƒê·ªïi tr·∫°ng th√°i LED theo gi√° tr·ªã c·ªßa ledState
    if (ledState == 0) {
      digitalWrite(BLUE_PIN, HIGH);  // B·∫≠t LED xanh d∆∞∆°ng
      digitalWrite(GREEN_PIN, LOW);
      digitalWrite(RED_PIN, LOW);
      client.publish("trashbin/3led", "BLUE");
      ledState = 1;
    } else if (ledState == 1) {
      digitalWrite(GREEN_PIN, HIGH);  // B·∫≠t LED xanh l√°
      digitalWrite(BLUE_PIN, LOW);
      digitalWrite(RED_PIN, LOW);
      client.publish("trashbin/3led", "GREEN");
      ledState = 2;
    } else if (ledState == 2) {
      digitalWrite(RED_PIN, HIGH);  // B·∫≠t LED ƒë·ªè
      digitalWrite(BLUE_PIN, LOW);
      digitalWrite(GREEN_PIN, LOW);
      client.publish("trashbin/3led", "RED");
      ledState = 0;
    }
  }
}